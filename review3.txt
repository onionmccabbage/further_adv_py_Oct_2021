Review 3 - Testing, Profiling and Timing about 1hr10, carry on after tea break
========================================
For this exercise, use any of the previous review exercises, or my solutions to those exercises

NB use online documentation and re-factor as needed (e.g. into unit modules for testing)

Construct some useful unit tests to run against parts of your app (e.g. the weather service)
Tests should fail if outcomes are not as expected
Also test that exceptions are thrown as expected
Make sure to test likely edge-cases and outcomes that could possibly occur

Gather some memory performance metrics by using @profile to decorate some of your functions
(take a baseline average for initial comparison)
Experiment with alternative structures for some functions to see if their memory use can be improved
For example, use a city generator compared to creating a collection of cities
Ensure the tests still pass after any changes you make

Optional
--------
Write a module called preparation.py which asks the user to enter some default values 
(to be uses in the weather app)
This module should provide defaults for city/cities, which metrics are required etc.
(possibly in a named tuple with sensible defaults)
Persist these values in a simple text file
When the weather app starts, read this configuration file and use the defaults
Include an option to use defaults which are known values that tests might expect

Super Optional
--------------
Make the weather app into an RxPY observable, or use a Flask server
Requests can be passed in for the city and JSON is returned
Don't just return the JSON from openweathermap, tidy it up and return a few values